#!/bin/bash

set -e

PROJECT=""
PROJECT_ROOT="/pdk/sources"

function containsBranch {
    BRANCH_LIST="$1"
    PREFERRED_BRANCH="$2"
    CONTAINS_BRANCH=$(echo "$BRANCH_LIST" | grep -q "$PREFERRED_BRANCH$" && echo 1 || echo 0)
    echo "$CONTAINS_BRANCH"
}

function preferredBranch {
    local REPO="$1"

    BRANCHES=$(git ls-remote -h $REPO)

    if [ $(containsBranch "$BRANCHES" "refs/heads/ubports/focal") == 1 ]; then
        echo "ubports/focal"
    elif [ $(containsBranch "$BRANCHES" "refs/heads/main") == 1 ]; then
        echo "main"
    fi
}

function tryPull {
    local REPO="$1"
    local CURL_OUTPUT=$(curl -I "$REPO" 2> /dev/null)
    local HTTP_RESPONSE=$(echo "$CURL_OUTPUT" | grep "^HTTP/2" | awk -F" " '{ print $2 }')

    if [ "$HTTP_RESPONSE" != "200" ]; then
        echo "Project doesn't seem to exist at '$1'..."
    else
        mkdir -p "$PROJECT_ROOT/$PROJECT"
        cd "$PROJECT_ROOT/$PROJECT"
        local BRANCH=$(preferredBranch $REPO)
        if [ "$BRANCH" != "" ]; then
            BRANCH_OPT="--branch $BRANCH"
        fi
        git clone $BRANCH_OPT --recursive "$1" src && echo "Clone complete!" && exit 0
    fi
}

GITLAB=0
GITHUB=0
OVERRIDE_PROVIDED=0

while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --github)
            GITHUB=1
            GITLAB=0
            OVERRIDE_PROVIDED=1
            shift
        ;;
        --gitlab)
            GITHUB=0
            GITLAB=1
            OVERRIDE_PROVIDED=1
            shift
        ;;
        -h|--help)
            echo "usage: $0 [--gitlab] [--github] project-name"
            echo ""
            echo "--github and --gitlab are optional, both will be probed by default"
            exit 0
        ;;
        *)
            PROJECT="$arg"
            shift
        ;;
    esac
done

if [ "$PROJECT" == "" ]; then
    echo "Please provide a project name as an argument"
    exit 1
fi

# Look in both locations by default
if [ "$OVERRIDE_PROVIDED" == "0" ]; then
    GITLAB=1
    GITHUB=1
fi

if [ "$GITLAB" == "1" ]; then
    echo "Looking for repo '$PROJECT' on GitLab (core)"
    tryPull "https://gitlab.com/ubports/core/$PROJECT"

    echo "Looking for repo '$PROJECT' on GitLab (core/packaging)"
    tryPull "https://gitlab.com/ubports/core/packaging/$PROJECT"

    echo "Looking for repo '$PROJECT' on GitLab (core/lib-cpp)"
    tryPull "https://gitlab.com/ubports/core/lib-cpp/$PROJECT"
fi

if [ "$GITHUB" == "1" ]; then
    echo "Looking for repo '$PROJECT' on GitHub"
    tryPull "https://github.com/ubports/$PROJECT"
fi
